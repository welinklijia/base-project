<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd		
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
    ">
	<!-- 引入配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>
    <!-- 配置数据源 -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
        destroy-method="close">
        <property name="url" value="${mysql.url}"/>
	       <property name="username" value="${mysql.username}"/>
	       <property name="password" value="${mysql.password}"/>
	       <!-- 配置初始化大小、最小、最大 -->
           <property name="initialSize" value="1" />
           <property name="minIdle" value="1" />
           <property name="maxActive" value="20" />
           <!-- 配置获取连接等待超时的时间 -->
           <property name="maxWait" value="60000" />
           <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
           <property name="timeBetweenEvictionRunsMillis" value="60000" />
           <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
           <property name="minEvictableIdleTimeMillis" value="300000" />
           <property name="validationQuery" value="SELECT 'x'" />
           <property name="testWhileIdle" value="true" />
           <property name="testOnBorrow" value="false" />
           <property name="testOnReturn" value="false" />
           <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
           <property name="filters" value="stat" />
      </bean>
      <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      		<property name="dataSource" ref="myDataSource"></property>
      </bean>
      
      <!-- 下面使用aop切面的方式来实现 -->
	  <tx:advice id="TestAdvice" transaction-manager="transactionManager">
		<!--配置事务传播性，隔离级别以及超时回滚等问题 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	  </tx:advice>
      <aop:config>
			<!--配置事务切点 -->
		  	<aop:pointcut id="services"
				expression="execution(* com.base.service.*.*(..))" />
			<aop:advisor pointcut-ref="services" advice-ref="TestAdvice" />
	  </aop:config>
      <bean id="sqlSessionBuilder" class="org.mybatis.spring.SqlSessionFactoryBean">
      		<property name="dataSource" ref="myDataSource"></property>
      		<!-- 指定mybatis的配置 通常这会是<settings> 或<typeAliases>的部分。
      		<property name="configLocation" value=""></property>-->
      		<!-- 指定mapper目录下以及子目录下的所有mapper.xml -->
      		<property name="mapperLocations" value="classpath*:mapper/**/*.xml"></property>
      </bean>
      <!-- dao层通过spring配置1 ，配置方法参考mybatis-spring的MapperFactoryBean说明
      <bean id="baseMapper" class="org.mybatis.spring.mapper.MapperFactoryBean" abstract="true" lazy-init="true">
      		<property name="sqlSessionFactory" ref="sqlSessionBuilder" />
      </bean>
      <bean id="subBaseUserMapper" parent="baseMapper">
      		<property name="mapperInterface" value="com.base.dao.subdao.SubBaseUserMapper"/>
      </bean>
      <bean id="subBaseDepartmentMapper" parent="baseMapper">
      		<property name="mapperInterface" value="com.base.dao.subdao.SubBaseDepartmentMapper"/>
      </bean>-->
      <!-- dao层通过spring配置2（扫描指定目录下的接口，以接口名首字母小写作为bean的名称），配置方法参考mybatis-spring的 MapperScannerConfigurer
      	会扫描指定目录下的接口，加载到spring容器中，以类名首字母小写作为名称。需要配置basePackage属性，多个值用逗号或分号分隔
      -->
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	        <property name="basePackage" value="com.base.dao" />
      </bean>
      <!-- service层通过spring配置 -->
      <bean id="userService" class="com.base.service.impl.UserServiceImpl">
      		<property name="subBaseUserMapper" ref="subBaseUserMapper"/>
      		<property name="subBaseDepartmentMapper" ref="subBaseDepartmentMapper"/>
      		<property name="subBaseRoleMapper" ref="subBaseRoleMapper"/>
      </bean>
      <bean id="departmentService" class="com.base.service.impl.DepartmentServiceImpl">
      		<property name="subBaseDepartmentMapper" ref="subBaseDepartmentMapper"/>
      </bean>
</beans>